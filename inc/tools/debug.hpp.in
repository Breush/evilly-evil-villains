#pragma once

#include "tools/stack.hpp"

//----------------------------//
//---- CMAKE defines here ----//

// To be ON until Release
#cmakedefine EEV_DEBUG_MODE

//--------------------//
//---- Debug mode ----//

#include <csignal>

#define mquit(MESSAGE)                                                              \
    do {                                                                            \
        tools::CallStack callStack;                                                 \
        callStack.refresh(0);                                                       \
        std::cerr << std::endl << "[!] Force quitting: " << MESSAGE << std::endl;   \
        std::cerr << std::endl << callStack.toString();                             \
        std::raise(SIGINT);                                                         \
        abort();                                                                    \
    } while (false);

// TODO Have the callstack as a wide-string too.
#define wquit(MESSAGE)                                                              \
    do {                                                                            \
        std::wcout << std::endl << L"[!] Force quitting: " << MESSAGE << std::endl; \
        std::raise(SIGINT);                                                         \
        abort();                                                                    \
    } while (false);

#if defined(EEV_DEBUG_MODE)
    #define DEBUG_GLOBAL 1
#else
    #define DEBUG_GLOBAL 0
#endif

// If global off, remove all
#if DEBUG_GLOBAL < 1
    // Generic
    // TODO Add file stream into some log file?
    #define debug_generic(PRINT, ...)  ((void) 0)
    #define mdebug_generic(PRINT, ...) ((void) 0)
    #define wdebug_generic(PRINT, ...) ((void) 0)

    // Asserts
    #define assert(bool_expr)       ((void) 0)
    #define massert(bool_expr, ...) ((void) 0)
    #define wassert(bool_expr, ...) ((void) 0)

// If global on
#else
    #include <iostream>
    #include <cstdlib>

    // Generic, if LEVEL >= BASE then execute
    #define debug_generic(...) \
            __VA_ARGS__;

    // Note: std::cout and std::wcout can not be used at the same time
    // So we use std::cerr and std::wcout to handle both narrow and wide encodings
    #define mdebug_generic(PRINT, ...) \
            std::cerr << PRINT << __VA_ARGS__ << std::endl;

    #define wdebug_generic(PRINT, ...) \
            std::wcout << PRINT << __VA_ARGS__ << std::endl;

    // Asserts
    #define assert(bool_expr) \
        do { if (!(bool_expr)) {\
            std::cerr << "Assertion failed: " << #bool_expr << std::endl;\
            std::cerr << "    File: " << __FILE__ << " l." << __LINE__ << std::endl;\
            std::cerr << "    Function: " << __func__ << std::endl;\
            mquit("Assertion failed.");\
        } } while (false)

    #define massert(bool_expr, ...) \
        do { if (!(bool_expr)) {\
            std::cerr << "Assertion failed: " << #bool_expr << std::endl;\
            std::cerr << "Message: " << __VA_ARGS__ << std::endl;\
            std::cerr << "    File: " << __FILE__ << " l." << __LINE__ << std::endl;\
            std::cerr << "    Function: " << __func__ << std::endl;\
            mquit("Assertion failed.");\
        } } while (false)

    #define wassert(bool_expr, ...) \
        do { if (!(bool_expr)) {\
            std::wcout << L"Assertion failed: " << #bool_expr << std::endl;\
            std::wcout << L"Message: " << __VA_ARGS__ << std::endl;\
            std::wcout << L"    File: " << __FILE__ << L" l." << __LINE__ << std::endl;\
            std::wcout << L"    Function: " << __func__ << std::endl;\
            mquit("Assertion failed.");\
        } } while (false)
#endif

